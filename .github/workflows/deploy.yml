name: Deploy to Azure

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run tests
      run: npm test
      continue-on-error: true
      
    - name: Run linting
      run: npm run lint
      
    - name: Type checking
      run: npm run typecheck
      
    - name: Build application
      run: npm run build
      
    - name: Create deployment package
      run: |
        echo "Creating deployment package..."
        
        # Validate required files exist
        if [ ! -d "dist" ]; then
          echo "::error::dist directory not found - build may have failed"
          exit 1
        fi
        
        if [ ! -f "package.json" ]; then
          echo "::error::package.json not found"
          exit 1
        fi
        
        if [ ! -f "package-lock.json" ]; then
          echo "::error::package-lock.json not found"
          exit 1
        fi
        
        
        # Verify critical files in dist directory
        if [ ! -f "dist/src/teams/index.js" ]; then
          echo "::error::Main application file dist/src/teams/index.js not found"
          exit 1
        fi
        
        # Create deployment package with node_modules
        echo "Packaging files: dist, package.json, package-lock.json, node_modules"
        zip -r deploy.zip dist package.json package-lock.json node_modules
        
        # Verify package was created
        if [ ! -f "deploy.zip" ]; then
          echo "::error::Failed to create deployment package"
          exit 1
        fi
        
        # Show package contents for verification
        echo "Deployment package contents:"
        unzip -l deploy.zip | head -20
        
        PACKAGE_SIZE=$(stat -c%s "deploy.zip" 2>/dev/null || stat -f%z "deploy.zip" 2>/dev/null || echo "unknown")
        echo "Package size: $PACKAGE_SIZE bytes"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy.zip

  deploy-to-staging:
    if: github.event_name == 'pull_request'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://workbook-teams-bot-staging.azurewebsites.net
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ vars.AZURE_WEBAPP_NAME }}-staging
        package: deploy.zip
        
    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ vars.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/health || exit 1

  deploy-to-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://workbook-teams-bot.azurewebsites.net
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ vars.RESOURCE_GROUP }} \
          --location westeurope
        
    - name: Skip Infrastructure Deployment (Manual Setup)
      run: |
        echo "⚠️ ARM template deployment DISABLED - using manual Azure resource configuration"
        echo "Infrastructure managed manually:"
        echo "  ✅ User-Assigned Managed Identity: workbook-teams-bot-identity"
        echo "  ✅ Bot Service: workbook-teams-bot (UserAssignedMSI)"
        echo "  ✅ App Service: ${{ vars.AZURE_WEBAPP_NAME }}"
        echo "  ✅ Key Vault: ${{ vars.KEY_VAULT_NAME }}"
        echo "  ✅ Application Insights: workbook-bot-insights"
        
        # Verify resources exist
        echo "Verifying critical resources..."
        
        # Check App Service
        if az webapp show --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} >/dev/null 2>&1; then
          echo "✅ App Service exists"
        else
          echo "❌ App Service not found"
          exit 1
        fi
        
        # Check Key Vault
        if az keyvault show --name ${{ vars.KEY_VAULT_NAME }} >/dev/null 2>&1; then
          echo "✅ Key Vault exists"
        else
          echo "❌ Key Vault not found"
          exit 1
        fi
        
        # Check Bot Service
        if az bot show --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} >/dev/null 2>&1; then
          echo "✅ Bot Service exists"
        else
          echo "❌ Bot Service not found"
          exit 1
        fi
        
    - name: Skip Key Vault Secret Update (Manual Management)
      run: |
        echo "⚠️ Key Vault secret updates DISABLED - using manually configured secrets"
        echo "Key Vault secrets managed manually:"
        echo "  ✅ openai-api-key: Configured manually"
        echo "  ✅ microsoft-app-id: Configured manually"  
        echo "  ✅ microsoft-app-password: Configured manually"
        echo "  ✅ workbook-api-key-dev: Configured manually"
        echo "  ✅ workbook-api-key-prod: Configured manually"
        echo "  ✅ workbook-password-dev: Configured manually"
        echo "  ✅ workbook-password-prod: Configured manually"
        
        # Just verify secrets exist without overwriting them
        REQUIRED_SECRETS=("openai-api-key" "microsoft-app-id" "microsoft-app-password" "workbook-api-key-dev" "workbook-api-key-prod" "workbook-password-dev" "workbook-password-prod")
        
        echo "Verifying manually configured secrets exist..."
        for secret in "${REQUIRED_SECRETS[@]}"; do
          SECRET_CHECK=$(az keyvault secret show --vault-name ${{ vars.KEY_VAULT_NAME }} --name "$secret" --query "id" --output tsv 2>/dev/null || echo "FAILED")
          if [ "$SECRET_CHECK" = "FAILED" ]; then
            echo "::error::Missing manually configured secret: $secret"
            exit 1
          else
            echo "✅ Secret exists: $secret"
          fi
        done
        
    - name: Verify App Settings
      run: |
        echo "Verifying App Service settings..."
        az webapp config appsettings list \
          --resource-group ${{ vars.RESOURCE_GROUP }} \
          --name ${{ vars.AZURE_WEBAPP_NAME }} \
          --query "[].{name:name, value:value}" \
          --output table
        echo "✅ App settings verified"
        
    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ vars.AZURE_WEBAPP_NAME }}
        package: deploy.zip
        
    - name: Verify deployment completion
      run: |
        echo "Waiting for app deployment to complete (60 seconds)..."
        sleep 60
        
        echo "Checking deployment status via Azure CLI..."
        
        # Check app service status
        APP_STATE=$(az webapp show --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} --query "state" --output tsv)
        echo "App Service State: $APP_STATE"
        
        if [ "$APP_STATE" != "Running" ]; then
          echo "::error::App Service is not running (state: $APP_STATE)"
          echo "Checking app service logs for startup issues..."
          az webapp log tail --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} --provider application --num 50 || true
          exit 1
        fi
        
        echo "✅ App Service deployment completed successfully"
        echo "Note: Health endpoint is secured and only accessible by Azure Bot Service"
        echo "Use Azure portal monitoring for health status visibility"
        
    - name: Update Application Insights
      run: |
        az monitor app-insights component update \
          --app workbook-bot-insights \
          --resource-group ${{ vars.RESOURCE_GROUP }} \
          --retention-time 90
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Dependency review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'